using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class LayerSolver : MonoBehaviour
{
    void Start()
    {
        
    }

    public void Solver3()
    {
         // char arrays to store the state of the rubix cube's facelets/faces.
    char[] white = new char[9];
    char[] red = new char[9];
    char[] orange = new char[9];
    char[] blue = new char[9];
    char[] green = new char[9];
    char[] yellow = new char[9];

    //Stores the solution generated by the solver.
    String Solution_output = "";

    // Elijah Gray 3/8/2022
    // creates a constructor that initializes the six arrays using a 
    // 54 character long string by breaking each section down for each face of the rubiks cube.
    public Beginner(string input_initialization)
    {

        if (input_initialization.Length < 54)
        {
            throw new ArgumentException("Input must be 54 (0-53) char long");

        } else
        {

            white = input_initialization.Substring(0, 9).ToCharArray();

            Debug.Log("white = " + CharArrayToString(white));

            red = input_initialization.Substring(9, 9).ToCharArray();

            Debug.Log("red = " + CharArrayToString(red));

            orange = input_initialization.Substring(18, 9).ToCharArray();

            Debug.Log("orange = " + CharArrayToString(orange));

            blue = input_initialization.Substring(27, 9).ToCharArray();

            Debug.Log("blue = " + CharArrayToString(blue));

            green = input_initialization.Substring(36, 9).ToCharArray();

            Debug.Log("green = " + CharArrayToString(green));

            yellow = input_initialization.Substring(45, 9).ToCharArray();

            Debug.Log("yellow = " + CharArrayToString(yellow));


        }

    }

    // executes the steps to solve the rubiks cube as per the beginner/layer method.
    // Elijah Gray 3/8/2022
    public void Solve_Cube()
    {
        string initial = output_cube();
        Debug.Log(initial);

        solve_white_cross();
        solve_white_corners();
        solve_middle_layer();
        solve_yellow_cross();
        solve_yellow_corners();
        yellow_corner_orientation();
        yellow_edges_colour_arrangement();

        Debug.Log("Cube solved!");

        string result = output_cube();
        Debug.Log(result);

    }

    // Elijah Gray 3/8/2022
    // returns the solution created by the solver adding onto the solution output string.
    public string get_solution()
    {
        return Solution_output;
    }


    // Elijah Gray 3/8/2022
    // initializes a string builder object and appends each of the six arrays to it and is converted to a string for the return
    public string output_cube()
    {
        //string cube_output = "";

        StringBuilder sb = new StringBuilder();
        sb.Append(white);
        sb.Append(red);
        sb.Append(orange);
        sb.Append(blue);
        sb.Append(green);
        sb.Append(yellow);

        return sb.ToString();
    }

    public static string CharArrayToString(char[] arr)
    {
        StringBuilder sb = new StringBuilder();
        foreach (char c in arr)
        {
            sb.Append(c);
        }
        return sb.ToString();
    }

    // swaps two elements from the arrays 
    // optimized to use the xor swap method
    // explanation and proofs here: https://youtu.be/I4UuurVgngw
    // Elijah Gray 3/8/2022
    void Swap2(ref char[] face_1, ref char[] face_2, int index_1, int index_2)
    {
        face_1[index_1] ^= face_2[index_2];
        face_2[index_2] ^= face_1[index_1];
        face_1[index_1] ^= face_2[index_2];
    }

    void Swap(ref char[] arr1, ref char[] arr2, int index1, int index2)
    {
        (arr1[index1], arr2[index2]) = (arr2[index2], arr1[index1]);
    }

    void rotate_clock(char choice)
    {

        Solution_output += choice;
        Solution_output += " ";

        //Debug.Log(choice);
        //Debug.Log(Solution_output);

        if (choice == 'w')
    {
            //same face swaps
            Swap(ref white, ref white, 7, 3);
            Swap(ref white, ref white, 6, 4);
            Swap(ref white, ref white, 0, 2);
            Swap(ref white, ref white, 7, 5);
            Swap(ref white, ref white, 0, 4);
            Swap(ref white, ref white, 1, 3);

            //different face swaps
            Swap(ref blue, ref orange, 0, 0);
            Swap(ref blue, ref orange, 7, 7);
            Swap(ref blue, ref orange, 6, 6);

            Swap(ref orange, ref green, 6, 6);
            Swap(ref orange, ref green, 7, 7);
            Swap(ref orange, ref green, 0, 0);

            Swap(ref green, ref red, 6, 6);
            Swap(ref green, ref red, 7, 7);
            Swap(ref green, ref red, 0, 0);
    }
    //-------------------------
    else if (choice == 'r')
    {
            Swap(ref red, ref red, 0, 4);
            Swap(ref red, ref red, 7, 5);
            Swap(ref red, ref red, 1, 3);
            Swap(ref red, ref red, 0, 6);
            Swap(ref red, ref red, 1, 5);
            Swap(ref red, ref red, 2, 4);
            //
            Swap(ref blue, ref white, 6, 3);
            Swap(ref blue, ref white, 5, 2);
            Swap(ref blue, ref white, 4, 1);

            Swap(ref white, ref green, 1, 0);
            Swap(ref white, ref green, 2, 1);
            Swap(ref white, ref green, 3, 2);

            Swap(ref green, ref yellow, 0, 3);
            Swap(ref green, ref yellow, 1, 2);
            Swap(ref green, ref yellow, 2, 1);

    }
    //-----------------------------------
    else if (choice == 'y')
    {
            Swap(ref yellow, ref yellow, 1, 5);
            Swap(ref yellow, ref yellow, 2, 4);
            Swap(ref yellow, ref yellow, 0, 6);
            Swap(ref yellow, ref yellow, 1, 3);
            Swap(ref yellow, ref yellow, 0, 4);
            Swap(ref yellow, ref yellow, 7, 5);

            Swap(ref blue, ref red, 4, 4);
            Swap(ref blue, ref red, 3, 3);
            Swap(ref blue, ref red, 2, 2);

            Swap(ref red, ref green, 2, 2);
            Swap(ref red, ref green, 3, 3);
            Swap(ref red, ref green, 4, 4);

            Swap(ref green, ref orange, 4, 4);
            Swap(ref green, ref orange, 3, 3);
            Swap(ref green, ref orange, 2, 2);
    }
    //-------------------------------------
    else if (choice == 'o')
    {
            Swap(ref orange, ref orange, 4, 0);
            Swap(ref orange, ref orange, 3, 1);
            Swap(ref orange, ref orange, 5, 7);
            Swap(ref orange, ref orange, 4, 2);
            Swap(ref orange, ref orange, 5, 1);
            Swap(ref orange, ref orange, 6, 0);

            Swap(ref blue, ref yellow, 2, 5);
            Swap(ref blue, ref yellow, 1, 6);
            Swap(ref blue, ref yellow, 0, 7);

            Swap(ref yellow, ref green, 5, 6);
            Swap(ref yellow, ref green, 6, 5);
            Swap(ref yellow, ref green, 7, 4);

            Swap(ref green, ref white, 6, 7);
            Swap(ref green, ref white, 5, 6);
            Swap(ref green, ref white, 4, 5);

        }
    //-------------------------------------
    else if (choice == 'g')
    {
            Swap(ref green, ref green, 6, 2);
            Swap(ref green, ref green, 5, 3);
            Swap(ref green, ref green, 7, 1);
            Swap(ref green, ref green, 4, 6);
            Swap(ref green, ref green, 7, 3);
            Swap(ref green, ref green, 0, 2);

            Swap(ref white, ref orange, 5, 2);
            Swap(ref white, ref orange, 4, 1);
            Swap(ref white, ref orange, 3, 0);

            Swap(ref yellow, ref orange, 3, 2);
            Swap(ref yellow, ref orange, 4, 1);
            Swap(ref yellow, ref orange, 5, 0);

            Swap(ref yellow, ref red, 3, 6);
            Swap(ref yellow, ref red, 4, 5);
            Swap(ref yellow, ref red, 5, 4);
       
        }
    //-------------------------------------------
    else if (choice == 'b')
        {
            Swap(ref blue, ref blue, 1, 7);
            Swap(ref blue, ref blue, 2, 6);
            Swap(ref blue, ref blue, 5, 3);
            Swap(ref blue, ref blue, 2, 0);
            Swap(ref blue, ref blue, 7, 3);
            Swap(ref blue, ref blue, 6, 4);

            Swap(ref yellow, ref orange, 1, 4);
            Swap(ref yellow, ref orange, 0, 5);
            Swap(ref yellow, ref orange, 7, 6);

            Swap(ref white, ref orange, 7, 4);
            Swap(ref white, ref orange, 0, 5);
            Swap(ref white, ref orange, 1, 6);

            Swap(ref white, ref red, 7, 0);
            Swap(ref white, ref red, 0, 1);
            Swap(ref white, ref red, 1, 2);
        }

}

void white_bottom(char q)
{
    if ((yellow[0] == 'w' && blue[3] == q) || (yellow[2] == 'w' && red[3] == q) || (yellow[4] == 'w' && green[3] == q) || (yellow[6] == 'w' && orange[3] == q))
    {
        if (q == 'b')
        {
            while (blue[3] != q || yellow[0] != 'w')
            { rotate_clock('y'); }
        }
        if (q == 'r')
        {
            while (red[3] != q || yellow[2] != 'w')
            { rotate_clock('y'); }
            if (q != 'b')
            {
                while (white[0] != 'w' && blue[7] != 'b')
                { rotate_clock('w'); }
            }
        }
        if (q == 'g')
        {
            while (green[3] != q || yellow[4] != 'w')
            { rotate_clock('y'); }
            if (q != 'b')
            {
                while (white[0] != 'w' && blue[7] != 'b')
                { rotate_clock('w'); }
            }
        }
        if (q == 'o')
        {
            while (orange[3] != q || yellow[6] != 'w')
            { rotate_clock('y'); }
            if (q != 'b')
            {
                while (white[0] != 'w' && blue[7] != 'b')
                { rotate_clock('w'); }
            }
        }
        rotate_clock(q); rotate_clock(q);
    }
}
void right_alg(char a, char c)
{
    rotate_clock(a); rotate_clock(a); rotate_clock(a);
    rotate_clock('y'); rotate_clock(a); white_bottom(c);
}
void white_right(char q)
{
    if (blue[1] == 'w' || red[1] == 'w' || green[1] == 'w' || orange[1] == 'w')
    {
        if (blue[5] == q && red[1] == 'w')
        { right_alg('b', q); }
        if (red[5] == q && green[1] == 'w')
        { right_alg('r', q); }
        if (green[5] == q && orange[1] == 'w')
        { right_alg('g', q); }
        if (orange[5] == q && blue[1] == 'w')
        { right_alg('o', q); }
    }
}
void left_alg(char a, char c)
{
    rotate_clock(a); rotate_clock('y'); rotate_clock(a);
    rotate_clock(a); rotate_clock(a); white_bottom(c);
}
void white_left(char q)
{
    if (blue[5] == 'w' || red[5] == 'w' || green[5] == 'w' || orange[5] == 'w')
    {
        if (blue[5] == 'w' && red[1] == q)
        { left_alg('r', q); }
        if (red[5] == 'w' && green[1] == q)
        { left_alg('g', q); }
        if (green[5] == 'w' && orange[1] == q)
        { left_alg('o', q); }
        if (orange[5] == 'w' && blue[1] == q)
        { left_alg('b', q); }
    }
}
void top_alg(char a, char b, char c)
    {
        rotate_clock(a); rotate_clock(a); rotate_clock(a);
        rotate_clock('w'); rotate_clock(b); rotate_clock('w');
        rotate_clock('w'); rotate_clock('w'); white_bottom(c);
    }
void white_top(char q)
    {
        if (blue[7] == 'w' && white[0] == q)
        { top_alg('b', 'r', q); }
        if (red[7] == 'w' && white[2] == q)
        { top_alg('r', 'g', q); }
        if (green[7] == 'w' && white[4] == q)
        { top_alg('g', 'o', q); }
        if (orange[7] == 'w' && white[6] == q)
        { top_alg('o', 'b', q); }
    }
void inv_alg(char a, char b, char c)
    {
        rotate_clock(a); rotate_clock(b); rotate_clock('y');
        rotate_clock('y'); rotate_clock('y'); rotate_clock(b);
        rotate_clock(b); rotate_clock(b); rotate_clock(a);
        rotate_clock(a); rotate_clock(a); white_bottom(c);
    }
void white_bottom_inverted(char q)
    {
        if (blue[3] == 'w' || red[3] == 'w' || green[3] == 'w' || orange[3] == 'w')
        {
            if (blue[3] == 'w' && yellow[0] == q)
            { inv_alg('b', 'r', q); }
            if (red[3] == 'w' && yellow[2] == q)
            { inv_alg('r', 'g', q); }
            if (green[3] == 'w' && yellow[4] == q)
            { inv_alg('g', 'o', q); }
            if (orange[3] == 'w' && yellow[6] == q)
            { inv_alg('o', 'b', q); }
        }
    }

void solve_white_cross()
{
        char[] prefer = new char[] { 'b', 'r', 'g', 'o' };

        for (int i = 0; i < 4; i++)
        {
            if (white[0] == 'w' && blue[7] == prefer[i]) { rotate_clock('b'); }
            if (white[2] == 'w' && red[7] == prefer[i]) { rotate_clock('r'); }
            if (white[4] == 'w' && green[7] == prefer[i]) { rotate_clock('g'); }
            if (white[6] == 'w' && orange[7] == prefer[i]) { rotate_clock('o'); }
            white_bottom(prefer[i]); white_bottom_inverted(prefer[i]); white_left(prefer[i]); white_right(prefer[i]); white_top(prefer[i]);
            if (i != 0)
            { while (blue[7] != 'b') { rotate_clock('w'); } }
            if (white[0] == 'w' && white[2] == 'w' && white[4] == 'w' && white[6] == 'w' && blue[7] == 'b' && red[7] == 'r' && green[7] == 'g' && orange[7] == 'o')
            { break; }
        }

    }

void white_corners_alg_left()
    {
        rotate_clock('b'); rotate_clock('b'); rotate_clock('b');
        rotate_clock('y'); rotate_clock('y'); rotate_clock('y');
        rotate_clock('b');
    }
void white_corners_alg_right()
{
        rotate_clock('r');
        rotate_clock('y');
        rotate_clock('r'); rotate_clock('r'); rotate_clock('r');
    }
void solve_white_corners()
{
        while (red[0] != 'r' || red[6] != 'r' || blue[0] != 'b' || blue[6] != 'b' || orange[0] != 'o' || orange[6] != 'o' || green[0] != 'g' || green[6] != 'g')
        {
            while (red[7] != 'r')
            {
                rotate_clock('w');
            }
            if (blue[4] == 'w' || red[4] == 'w' || green[4] == 'w' || orange[4] == 'w')
            {
                while (blue[4] != 'w')
                {
                    rotate_clock('y');
                }
                while (red[2] != red[7])
                {
                    rotate_clock('w');
                }
                white_corners_alg_left();
                while (red[7] != 'r')
                {
                    rotate_clock('w');
                }
            }
            else if (blue[2] == 'w' || red[2] == 'w' || green[2] == 'w' || orange[2] == 'w')
            {
                while (red[2] != 'w')
                {
                    rotate_clock('y');
                }
                while (red[7] != yellow[1])
                {
                    rotate_clock('w');
                }
                white_corners_alg_right();
                while (red[7] != 'r')
                {
                    rotate_clock('w');
                }
            }
            else if (yellow[1] == 'w' || yellow[3] == 'w' || yellow[5] == 'w' || yellow[7] == 'w')
            {
                while (yellow[1] != 'w')
                {
                    rotate_clock('y');
                }
                while (red[2] != blue[7])
                {
                    rotate_clock('w');
                }
                rotate_clock('b'); rotate_clock('b'); rotate_clock('b');
                rotate_clock('y'); rotate_clock('y');
                rotate_clock('b');
                while (blue[4] != 'w')
                {
                    rotate_clock('y');
                }
                while (red[2] != red[7])
                {
                    rotate_clock('w');
                }
                white_corners_alg_left();
                while (red[7] != 'r')
                {
                    rotate_clock('w');
                }
            }
            else
            {
                while (red[7] == red[0])
                {
                    rotate_clock('w');
                }
                white_corners_alg_left();
                while (red[7] != 'r')
                {
                    rotate_clock('w');
                }
            }
        }
    }
void middle_place_left_alg(char left, char center)
{
        rotate_clock('y'); rotate_clock('y'); rotate_clock('y');
        rotate_clock(left); rotate_clock(left); rotate_clock(left);
        rotate_clock('y');
        rotate_clock(left);
        rotate_clock('y');
        rotate_clock(center);
        rotate_clock('y'); rotate_clock('y'); rotate_clock('y');
        rotate_clock(center); rotate_clock(center); rotate_clock(center);

    }
void middle_place_right_alg(char center, char right)
{
        rotate_clock('y');
        rotate_clock(right);
        rotate_clock('y'); rotate_clock('y'); rotate_clock('y');
        rotate_clock(right); rotate_clock(right); rotate_clock(right);
        rotate_clock('y'); rotate_clock('y'); rotate_clock('y');
        rotate_clock(center); rotate_clock(center); rotate_clock(center);
        rotate_clock('y');
        rotate_clock(center);
    }


   
void solve_middle_layer()
{
        while (red[5] != 'r' || red[1] != 'r' || blue[1] != 'b' || blue[5] != 'b' || orange[1] != 'o' || orange[5] != 'o' || green[1] != 'g' || green[5] != 'g')
        {

            if ((orange[1] != 'o' && green[5] != 'g') && (orange[1] != 'y' || green[5] != 'y'))
            {
                while (green[3] != 'y' && yellow[4] != 'y')
                {
                    rotate_clock('y');
                }
                middle_place_right_alg('g', 'o');
            }

            else if ((orange[5] != 'o' && blue[1] != 'b') && (orange[5] != 'y' || blue[1] != 'y'))
            {
                while (orange[3] != 'y' && yellow[6] != 'y')
                {
                    rotate_clock('y');
                }
                middle_place_right_alg('o', 'b');
            }

            else if ((blue[5] != 'b' && red[1] != 'r') && (blue[5] != 'y' || red[1] != 'y'))
            {
                while (blue[3] != 'y' && yellow[0] != 'y')
                {
                    rotate_clock('y');
                }
                middle_place_right_alg('b', 'r');
            }

            else if ((red[5] != 'r' && green[1] != 'g') && (red[5] != 'y' || green[1] != 'y'))
            {
                while (red[3] != 'y' && yellow[2] != 'y')
                {
                    rotate_clock('y');
                }
                middle_place_right_alg('r', 'g');
            }

            while (red[3] == 'y' || yellow[2] == 'y')
            {
                rotate_clock('y');
            }

            if (red[3] == 'r' && yellow[2] != 'y')
            {
                if (yellow[2] == 'g')
                {
                    middle_place_right_alg('r', 'g');
                }
                else if (yellow[2] == 'b')
                {
                    middle_place_left_alg('b', 'r');
                }
            }
            else if (red[3] == 'b' && yellow[2] != 'y')
            {
                rotate_clock('y');
                if (yellow[0] == 'r')
                {
                    middle_place_right_alg('b', 'r');
                }
                else if (yellow[0] == 'o')
                {
                    middle_place_left_alg('o', 'b');
                }
            }
            else if (red[3] == 'o' && yellow[2] != 'y')
            {
                rotate_clock('y'); rotate_clock('y');
                if (yellow[6] == 'b')
                {
                    middle_place_right_alg('o', 'b');
                }
                else if (yellow[6] == 'g')
                {
                    middle_place_left_alg('g', 'o');
                }
            }
            else if (red[3] == 'g' && yellow[2] != 'y')
            {
                rotate_clock('y'); rotate_clock('y'); rotate_clock('y');
                if (yellow[4] == 'o')
                {
                    middle_place_right_alg('g', 'o');
                }
                else if (yellow[4] == 'r')
                {
                    middle_place_left_alg('r', 'g');
                }
            }
        }
    }
void yellow_cross_algorithm()
{
    rotate_clock('r');
    rotate_clock('y');
    rotate_clock('g');
    rotate_clock('y'); rotate_clock('y'); rotate_clock('y');
    rotate_clock('g'); rotate_clock('g'); rotate_clock('g');
    rotate_clock('r'); rotate_clock('r'); rotate_clock('r');
}
void solve_yellow_cross()
{
    while (yellow[0] != 'y' || yellow[2] != 'y' || yellow[4] != 'y' || yellow[6] != 'y')
    {
        if ((yellow[0] == 'y' && yellow[6] == 'y') || (yellow[4] == 'y' && yellow[6] == 'y')
                || (yellow[2] == 'y' && yellow[4] == 'y') || (yellow[0] == 'y' && yellow[2] == 'y'))
        {
            while (yellow[0] != 'y' && yellow[6] != 'y')
            {
                rotate_clock('y');
            }
            yellow_cross_algorithm();
        }
        if ((yellow[2] == 'y' && yellow[6] == 'y') || (yellow[0] == 'y' && yellow[4] == 'y'))
        {
            while (yellow[0] != 'y' && yellow[4] != 'y')
            {
                rotate_clock('y');
            }
            yellow_cross_algorithm();
            yellow_cross_algorithm();
        }
        else if (yellow[8] == 'y')
        {
            yellow_cross_algorithm();
            rotate_clock('y');
            yellow_cross_algorithm();
            yellow_cross_algorithm();
        }
    }
}
void yellow_corners_algorithm()
    {
        rotate_clock('g');
        rotate_clock('y');
        rotate_clock('g'); rotate_clock('g'); rotate_clock('g');
        rotate_clock('y');
        rotate_clock('g');
        rotate_clock('y'); rotate_clock('y');
        rotate_clock('g'); rotate_clock('g'); rotate_clock('g');
    }
void solve_yellow_corners()
{
    while (yellow[1] != 'y' || yellow[3] != 'y' || yellow[5] != 'y' || yellow[7] != 'y')
    {
        if ((yellow[1] == 'y' && yellow[3] != 'y' && yellow[5] != 'y' && yellow[7] != 'y')
           || (yellow[3] == 'y' && yellow[1] != 'y' && yellow[5] != 'y' && yellow[7] != 'y')
           || (yellow[5] == 'y' && yellow[1] != 'y' && yellow[3] != 'y' && yellow[7] != 'y')
           || (yellow[7] == 'y' && yellow[1] != 'y' && yellow[3] != 'y' && yellow[5] != 'y'))
        {
            while (yellow[1] != 'y')
            {
                rotate_clock('y');
            }
            yellow_corners_algorithm();
        }
        else if ((green[2] == 'y' && green[4] == 'y' && yellow[1] == 'y' && yellow[7] == 'y')
                || (orange[2] == 'y' && orange[4] == 'y' && yellow[1] == 'y' && yellow[3] == 'y')
                || (blue[2] == 'y' && blue[4] == 'y' && yellow[3] == 'y' && yellow[5] == 'y')
                || (red[2] == 'y' && red[4] == 'y' && yellow[5] == 'y' && yellow[7] == 'y'))
        {
            while (red[2] != 'y' && red[4] != 'y' && yellow[5] != 'y' && yellow[7] != 'y')
            {
                rotate_clock('y');
            }
            yellow_corners_algorithm();
        }
        else if ((red[4] == 'y' && orange[2] == 'y' && yellow[1] == 'y' && yellow[7] == 'y')
                || (blue[2] == 'y' && green[4] == 'y' && yellow[1] == 'y' && yellow[3] == 'y')
                || (red[2] == 'y' && orange[4] == 'y' && yellow[3] == 'y' && yellow[5] == 'y')
                || (blue[4] == 'y' && green[2] == 'y' && yellow[5] == 'y' && yellow[7] == 'y'))
        {
            while (red[2] != 'y' && orange[4] != 'y' && yellow[3] != 'y' && yellow[5] != 'y')
            {
                rotate_clock('y');
            }
            yellow_corners_algorithm();
        }
        else if ((green[2] == 'y' && green[4] == 'y' && blue[2] == 'y' && blue[4] == 'y')
            || (red[2] == 'y' && red[4] == 'y' && orange[2] == 'y' && orange[4] == 'y'))
        {
            while (green[2] != 'y' && green[4] != 'y' && blue[2] != 'y' && blue[4] != 'y')
            {
                rotate_clock('y');
            }
            yellow_corners_algorithm();
        }
        else if ((green[2] == 'y' && orange[2] == 'y' && orange[4] == 'y' && blue[4] == 'y')
            || (red[4] == 'y' && orange[2] == 'y' && blue[2] == 'y' && blue[4] == 'y')
            || (red[2] == 'y' && red[4] == 'y' && green[4] == 'y' && blue[2] == 'y')
            || (green[2] == 'y' && green[4] == 'y' && orange[4] == 'y' && red[2] == 'y'))
        {
            while (green[2] != 'y' && orange[2] != 'y' && orange[4] != 'y' && blue[4] != 'y')
            {
                rotate_clock('y');
            }
            yellow_corners_algorithm();
        }
        else if ((yellow[1] == 'y' && yellow[5] == 'y' && yellow[3] != 'y' && yellow[7] != 'y')
            || (yellow[3] == 'y' && yellow[7] == 'y' && yellow[1] != 'y' && yellow[5] != 'y'))
        {
            while (red[2] != 'y' && green[4] != 'y')
            {
                rotate_clock('y');
            }
            yellow_corners_algorithm();
        }
    }
}
void yellow_corner_orientation_algorithm()
{
    rotate_clock('g'); rotate_clock('g'); rotate_clock('g');
    rotate_clock('r');
    rotate_clock('g'); rotate_clock('g'); rotate_clock('g');
    rotate_clock('o'); rotate_clock('o');
    rotate_clock('g');
    rotate_clock('r'); rotate_clock('r'); rotate_clock('r');
    rotate_clock('g'); rotate_clock('g'); rotate_clock('g');
    rotate_clock('o'); rotate_clock('o');
    rotate_clock('g'); rotate_clock('g');
    rotate_clock('y'); rotate_clock('y'); rotate_clock('y');
}
void yellow_corner_orientation()
{
    while (red[2] != 'r' || red[4] != 'r' || green[2] != 'g' || green[4] != 'g'
          || orange[2] != 'o' || orange[4] != 'o' || blue[2] != 'b' || blue[4] != 'b')
    {
        if ((red[2] == red[4]) || (green[2] == green[4]) || (orange[2] == orange[4]) || (blue[2] == blue[4]))
        {
            while (orange[2] != orange[4])
            {
                rotate_clock('y');
            }
            yellow_corner_orientation_algorithm();
            while (blue[2] != 'b')
            {
                rotate_clock('y');
            }
        }
        else
        {
            while (orange[4] != 'o' && red[4] != 'r')
            {
                rotate_clock('y');
            }
            yellow_corner_orientation_algorithm();
            while (orange[2] != orange[4])
            {
                rotate_clock('y');
            }
            yellow_corner_orientation_algorithm();
            while (blue[2] != 'b')
            {
                rotate_clock('y');
            }
        }
    }
}
void yellow_edges_colour_arrangement_right()
{
    rotate_clock('r'); rotate_clock('r');
    rotate_clock('y'); rotate_clock('y'); rotate_clock('y');
    rotate_clock('g'); rotate_clock('g'); rotate_clock('g');
    rotate_clock('b');
    rotate_clock('r'); rotate_clock('r');
    rotate_clock('b'); rotate_clock('b'); rotate_clock('b');
    rotate_clock('g');
    rotate_clock('y'); rotate_clock('y'); rotate_clock('y');
    rotate_clock('r'); rotate_clock('r');
}
void yellow_edges_colour_arrangement_left()
{
    rotate_clock('r'); rotate_clock('r');
    rotate_clock('y');
    rotate_clock('b');
    rotate_clock('g'); rotate_clock('g'); rotate_clock('g');
    rotate_clock('r'); rotate_clock('r');
    rotate_clock('b'); rotate_clock('b'); rotate_clock('b');
    rotate_clock('g');
    rotate_clock('y');
    rotate_clock('r'); rotate_clock('r');
}
void yellow_edges_colour_arrangement()
{
    while (red[2] != 'r')
    {
        rotate_clock('r');
    }
    if (red[3] == 'o' && orange[3] == 'r' && blue[3] == 'g' && green[3] == 'b')
    {
        yellow_edges_colour_arrangement_left();
    }
    else if (red[3] == 'b' && blue[3] == 'r')
    {
        yellow_edges_colour_arrangement_left();
    }
    else if (red[3] == 'g' && green[3] == 'r')
    {
        yellow_edges_colour_arrangement_left();
    }
    while (orange[2] != orange[3])
    {
        rotate_clock('y');
    }
    if (red[3] == green[2])
    {
        yellow_edges_colour_arrangement_right();
    }
    else if (red[3] == blue[2])
    {
        yellow_edges_colour_arrangement_left();
    }
    while (red[3] != 'r')
    {
        rotate_clock('y');
    }
}
    }
}
